#!/bin/bash
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.
#
# Based on Wondershaper 1.4 (current versio)
# License GPLv2 <https://gnu.org/licenses/gpl-2.0.html>
#
# Copyright (c) 2002-2018 Bert Hubert <ahu@ds9a.nl>,
#         Jacco Geul <jacco@geul.net>, Simon SÃ©hier <simon@sehier.fr>
#
# See the ChangeLog for information on the individual contributions of the authors.

# QAUNTUM should be low as possible but not below your MTU.
QUANTUM=1500

# TC/HTB does numerous self computations.
COMMONOPTIONS="$COMMONOPTIONS"

VERSION=1.4

usage()
{
cat << EOF
USAGE: $0 [-hcs] [-a <adapter>] [-d <rate>] [-u <rate>]
Limit the bandwidth of an adapter
OPTIONS:
   -h           Show this message
   -a <adapter> Set the adpter
   -d <rate>    Set maximum download rate (in Kbps) and/or
   -u <rate>    Set maximum upload rate (in Kbps)
   -p           Use presets in /etc/conf.d/wondershaper.conf
   -c           Clear the limits from adapter
   -s           Show the current status of adapter
   -v           Show the current version
MODES:
   PS4wanlanshape -a <adapter> -d <rate> -u <rate>
   PS4wanlanshape -c -a <adapter>
   PS4wanlanshape -s -a <adapter>
EXAMPLES:
   PS4wanlanshape -a eth0 -d 1024 -u 512
   PS4wanlanshape -a eth0 -u 512
   PS4wanlanshape -c -a eth0
EOF
}

DSPEED=
USPEED=
IFACE=
IFB="ifb0"
IFB1="ifb1"
MODE=
# LAN eth#
LANFACE="eth0"
# LAN IP/SUBNET
LANMASK="192.168.2.0/24"
LANSPEED="100mbit"

while getopts hvd:u:a:pcs o
do	case "$o" in
	h)	usage
		exit 1;;
        v)      echo "Version $VERSION"
                exit 0;;
	d)	DSPEED=$OPTARG;;
	u)      USPEED=$OPTARG;;
	a)      IFACE=$OPTARG;;
	p)      MODE="presets";;
	c)      MODE="clear";;
	s)      MODE="status";;
	[?])	usage
		exit 1;;
	esac
done

if [ "$MODE" = "presets" ]
then
    if [ -f /etc/conf.d/wondershaper.conf ]
    then
	source /etc/conf.d/wondershaper.conf
    else
	echo "/etc/conf.d/wondershaper.conf not found"
	exit 1
    fi
fi

if [[ ! -z $MODE ]] && [[ -z $IFACE ]]
then
    echo "Please supply the adapter name for the mode."
    echo ""
    usage
    exit 1
fi

if [ "$MODE" = "status" ]
then
    tc -s qdisc ls dev $IFACE
    tc -s class ls dev $IFACE
    exit
fi

if [ "$MODE" = "clear" ]
then
    tc qdisc del dev $IFACE root    2> /dev/null > /dev/null
    tc qdisc del dev $IFACE ingress 2> /dev/null > /dev/null
    tc qdisc del dev $LANFACE root    2> /dev/null > /dev/null
    tc qdisc del dev $LANFACE ingress 2> /dev/null > /dev/null
    tc qdisc del dev $IFB   root    2> /dev/null > /dev/null
    tc qdisc del dev $IFB   ingress 2> /dev/null > /dev/null
    tc qdisc del dev $IFB1   root    2> /dev/null > /dev/null
    tc qdisc del dev $IFB1   ingress 2> /dev/null > /dev/null
    ifconfig ifb0 down
    ifconfig ifb1 down
    exit
fi

if ( [[ -z $DSPEED ]] && [[ -z $USPEED ]] ) || [[ -z $IFACE ]]
then
    usage
    exit 1
fi

#Interactive Port PS4
INTERACTIVE_PORT=3074

# LOW PRIORITY BY PORT and IP. SRC=PORT OUT DEST=PORT IN.
# LOW priority source netmasks
NOPRIOHOSTSRC=

# LOW priority destination netmasks
NOPRIOHOSTDST=

# LOW priority source ports
NOPRIOPORTSRC="22 33001 7777 8134"

# LOW priority destination ports
NOPRIOPORTDST="22 33001 7777 8134"

# HIGH priority destination ports for PS4
HIPRIOPORTDST="2001 3075 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 28608 30000 30001 30002 30003 30004 30005 30006 30007 30008 30009"

# HIGH priority source ports for PS4
HIPRIOPORTSRC="2001 3075 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 28608 30000 30001 30002 30003 30004 30005 30006 30007 30008 30009"

###### UPLINK/UPLOAD shaping.

# ROOT HTB's
# WAN
tc qdisc add dev $IFACE root handle 1: htb \
    default 20
    
# LAN
tc qdisc add dev $LANFACE root handle 2: htb \
  default 10
  
# LAN PARENT CLASS
tc class add dev $LANFACE parent 2: classid 2:1 htb \
        rate $LANSPEED \
        prio 5 $COMMONOPTIONS

# LAN TRAFFIC CLASSES (HARD SET)
tc class add dev $LANFACE parent 2: classid 2:10 htb rate 50mbit ceil 100mbit prio 1 $COMMONOPTIONS 
tc class add dev $LANFACE parent 2: classid 2:20 htb rate 30mbit ceil 70mbit prio 2 $COMMONOPTIONS
tc class add dev $LANFACE parent 2: classid 2:30 htb rate 20mbit ceil 30mbit prio 3 $COMMONOPTIONS

# WAN TRAFFIC CLASSES
if [[ ! -z $USPEED ]]
then
    # PARENT 
    tc class add dev $IFACE parent 1: classid 1:1 htb \
        rate ${USPEED}kbit \
        prio 5 $COMMONOPTIONS

    # HIGH class 1:10:

    tc class add dev $IFACE parent 1:1 classid 1:10 htb \
        rate $[40*$USPEED/100]kbit ceil $[95*$USPEED/100]kbit \
        prio 1 $COMMONOPTIONS

    # MEDIUM 1 1:20 - gets slightly less traffic than 1:10

    tc class add dev $IFACE parent 1:1 classid 1:20 htb \
        rate $[35*$USPEED/100]kbit ceil $[95*$USPEED/100]kbit \
        prio 2 $COMMONOPTIONS

    # MEDIUM 2 1:30 - gets slightly less traffic than 1:20

    tc class add dev $IFACE parent 1:1 classid 1:30 htb \
        rate $[25*$USPEED/100]kbit ceil $[90*$USPEED/100]kbit \
        prio 3 $COMMONOPTIONS

    # Both WAN and LAN get SFQ
    tc qdisc add dev $IFACE parent 1:10 handle 10: sfq perturb 10 quantum $QUANTUM
    tc qdisc add dev $IFACE parent 1:20 handle 20: sfq perturb 10 quantum $QUANTUM
    tc qdisc add dev $IFACE parent 1:30 handle 30: sfq perturb 10 quantum $QUANTUM
    tc qdisc add dev $LANFACE parent 2:10 handle 10: sfq perturb 10 quantum $QUANTUM
    tc qdisc add dev $LANFACE parent 2:20 handle 20: sfq perturb 10 quantum $QUANTUM
    tc qdisc add dev $LANFACE parent 2:30 handle 30: sfq perturb 10 quantum $QUANTUM

    # FILTER PRIORITY - GAMING RELATED WAN and LAN
    # TOS
    tc filter add dev $IFACE parent 1: protocol ip prio 10 u32 \
        match ip tos 0x10 0xff  flowid 1:10
	
    tc filter add dev $LANFACE parent 1: protocol ip prio 10 u32 \
        match ip tos 0x10 0xff  flowid 2:10

    # ICMP 
    tc filter add dev $IFACE parent 1: protocol ip prio 11 u32 \
        match ip protocol 1 0xff flowid 1:10
	
    tc filter add dev $LANFACE parent 1: protocol ip prio 11 u32 \
        match ip protocol 1 0xff flowid 2:10

    # SMALL PACKETS (<64 bytes)
    tc filter add dev $IFACE parent 1: protocol ip prio 12 u32 \
        match ip protocol 6 0xff \
        match u8 0x05 0x0f at 0 \
        match u16 0x0000 0xffc0 at 2 \
        flowid 1:10
	
	tc filter add dev $LANFACE parent 1: protocol ip prio 12 u32 \
        match ip protocol 6 0xff \
        match u8 0x05 0x0f at 0 \
        match u16 0x0000 0xffc0 at 2 \
        flowid 2:10

    # PS4 destination ports filters WAN and LAN
    for a in $INTERACTIVE_PORT
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 12 u32 \
            match ip dport $a 0xffff flowid 1:20
    done
    
    for b in $INTERACTIVE_PORT
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 12 u32 \
            match ip sport $b 0xffff flowid 1:20
    done	
    
    for a in $HIPRIOPORTDST
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 13 u32 \
            match ip dport $a 0xffff flowid 1:20
	    
	tc filter add dev $LANFACE parent 1: protocol ip prio 13 u32 \
            match ip dport $a 0xffff flowid 2:20
    done
    
    #PS4 source ports.
    for a in $HIPRIOPORTSRC
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 14 u32 \
            match ip sport $a 0xffff flowid 1:20
	    
	tc filter add dev $LANFACE parent 1: protocol ip prio 14 u32 \
            match ip sport $a 0xffff flowid 2:20
    done

    # MEDIUM 1 Priority WAN and LAN

    tc filter add dev $IFACE parent 1: protocol ip prio 16 u32 \
        match ip dst 0.0.0.0/0 flowid 1:20

    tc filter add dev $LANFACE parent 2: protocol ip prio 16 u32 \
        match ip dst 10.42.0.201/32 flowid 2:10
    tc filter add dev $LANFACE parent 2: protocol ip prio 16 u32 \
        match ip dst 10.42.0.1/32 flowid 2:10


    # MEDIUM 2 Priority
    
    tc filter add dev $LANFACE parent 2: protocol ip prio 17 u32 \
        match ip dst 10.42.0.0/25 flowid 2:20
    tc filter add dev $LANFACE parent 2: protocol ip prio 17 u32 \
        match ip dst 10.42.0.0/25 flowid 2:20
   
   for a in $NOPRIOPORTDST
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 18 u32 \
            match ip dport $a 0xffff flowid 1:30
    done

    for a in $NOPRIOPORTSRC
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 19 u32 \
            match ip sport $a 0xffff flowid 1:30
    done

    for a in $NOPRIOHOSTSRC
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 20 u32 \
            match ip src $a flowid 1:30
    done

    for a in $NOPRIOHOSTDST
    do
        tc filter add dev $IFACE parent 1: protocol ip prio 21 u32 \
            match ip dst $a flowid 1:30
    done

    
    
fi

# Download and destination WAN and LAN
# Ingress policer:
if [[ ! -z $DSPEED ]]
then

    # Add the IFB interface
    modprobe ifb
    ip link set dev $IFB up
    ip link set dev $IFB1 up
    ip link set dev $IFB txqueuelen 32
    ip link set dev $IFB1 txqueuelen 32
    ip link set mtu 1500 dev $IFB
    ip link set mtu 1500 dev $IFB1

    # Redirect  WAN and LAN to ifb0 and ifb1
    tc qdisc add dev $IFACE handle ffff: ingress
    tc qdisc add dev $LANFACE handle ffff: ingress

   # Mirred egress (now upload rules) to ifb# interfaces
   tc filter add dev $IFACE parent ffff: protocol ip u32 match u32 0 0 \
        action mirred egress redirect dev ifb0
    tc filter add dev $LANFACE parent ffff: protocol ip u32 match u32 0 0 \
        action mirred egress redirect dev ifb1
    
    # Add  root, class and rules for WAN and LAN IFB interfaces
    tc qdisc add dev $IFB root handle 3: htb
    tc qdisc add dev $IFB1 root handle 4: htb

    tc class add dev $IFB parent 3: classid 3:1 htb rate ${DSPEED}kbit 
    tc class add dev $IFB1 parent 4: classid 4:1 htb rate $LANSPEED
    
    # Add filter to rule for IP WAN and LAN
    tc filter add dev $IFB protocol ip parent 3: prio 1 u32 match ip src 0.0.0.0/0 flowid 3:1
    tc filter add dev $IFB1 protocol ip parent 4: prio 1 u32 match ip src $LANMASK flowid 4:1
fi
